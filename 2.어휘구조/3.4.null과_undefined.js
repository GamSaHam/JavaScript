// null은 보통 아무 값도 갖지 않음을 가리킬 때 사용되며, 특별한 값을 평가하는 키워듸이다.
// typeof null 연산자를 사용하면 object 라고 출력된다.
console.log(typeof null);

// null은 객체가 없을 을 뜻하는 특수한 객체 값으로 생각할 수 있다.

// undefined는 null보다 심한 부재상태를 나타낸다

// undefined는 초기화되지 않은 변수나, 존재하지 않은 객체 프로퍼티나 배열의 원소를 접근할려고
// 할떄 발생하는 값이다.
// 반환겂이 없는 함수의 반환값으며
var f = function(){

};

console.log(f());

// 실인자가 전달되지 않은 형식인자 값이다.
// null처럼 키워드가 아닌 전역 변수이다.
// 정의되지 않은 값으로 초기화 된다.
// ECMAScript3에서 undefined는 읽고 쓸수 있는 변수이므로 다른 값으로 설정
// 될수 있었다.
// 이러한 문제점이 ECMAScript5에서는 수정되었다.
// undefinded 읽기 전용이 되었다.

// undefined 가 반환되는데 고유값임을 말한다.
console.log(typeof undefined);

// 이러한 차이에도 불구하고 null과 undefined는 둘다 값이 없을을 가리코고
// null과 undefined둘다 프로퍼티와 메서드를 가지고 있지 않기 때문에 []
// 사용하면 TypeError가 발생한다.

// 시스템 수준에 예기치 않은 사황에 발생한, 오류성 값 부재를 표현 할 때는 undefined를 사용하고
// 일반적으로 프로그래밍 수준에 수준에서  예상 가능한 값 부재 상황을 표현 하고 싶을 때 null을 사용한다.
// 만약 이들 값중에 하나를 변수나 프로퍼티에 할당할 필요가 있거나 함수 인자로 전달할 필요가 있다면 undefined
// 보다 null을 사용한다.

// 3.5. 전역 객체
// 전역 객체의 프로퍼티는 자바스크립트 프로그램 전역에서 사용할 수 있게 정의된 심벌이다.
// 자바스크립트 인터프리터가 시작할 때, 새로운 전역 객체를 만들고 그 프로퍼티들을 초기화한다.

// 전역 객체의 예
// undefined, Infinity, NaN 같은 전역 프로퍼티
// 











